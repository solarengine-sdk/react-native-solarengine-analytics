buildscript {
  // Buildscript is evaluated before everything else so we can't use getExtOrDefault
  def kotlin_version = rootProject.ext.has("kotlinVersion") ? rootProject.ext.get("kotlinVersion") : project.properties["SolarengineAnalysisReactNative_kotlinVersion"]

  repositories {
    google()
    mavenCentral()
  }

  dependencies {
    classpath "com.android.tools.build:gradle:7.2.1"
    // noinspection DifferentKotlinGradleVersion
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
  }
}

def reactNativeArchitectures() {
  def value = rootProject.getProperties().get("reactNativeArchitectures")
  return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
}

def isNewArchitectureEnabled() {
  return rootProject.hasProperty("newArchEnabled") && rootProject.getProperty("newArchEnabled") == "true"
}

apply plugin: "com.android.library"
apply plugin: "kotlin-android"

if (isNewArchitectureEnabled()) {
  apply plugin: "com.facebook.react"
}

def getExtOrDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties["SolarengineAnalysisReactNative_" + name]
}

def getExtOrIntegerDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : (project.properties["SolarengineAnalysisReactNative_" + name]).toInteger()
}

def supportsNamespace() {
  def parsed = com.android.Version.ANDROID_GRADLE_PLUGIN_VERSION.tokenize('.')
  def major = parsed[0].toInteger()
  def minor = parsed[1].toInteger()

  // Namespace support was added in 7.3.0
  return (major == 7 && minor >= 3) || major >= 8
}

android {
  if (supportsNamespace()) {
    namespace "com.solarengineanalysisreactnative"

    sourceSets {
      main {
        manifest.srcFile "src/main/AndroidManifestNew.xml"
      }
    }
  }

  compileSdkVersion getExtOrIntegerDefault("compileSdkVersion")

  defaultConfig {
    minSdkVersion getExtOrIntegerDefault("minSdkVersion")
    targetSdkVersion getExtOrIntegerDefault("targetSdkVersion")

    if(SolarengineAnalysisGradleProperties_EnableRemoteConfig.toBoolean()) {
      buildConfigField "boolean", "ENABLE_REMOTECONFIG", "true"
    }
  }

  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }

  lintOptions {
    disable "GradleCompatible"
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }
}

repositories {
  mavenCentral()
  google()
  getRepositories()

  maven {
    url "https://maven-android.solar-engine.com/repository/se_sdk_for_android/"
  }
  maven {
    url 'https://developer.huawei.com/repo/'
  }
  maven {
    url 'https://developer.hihonor.com/repo'
  }
}

def kotlin_version = getExtOrDefault("kotlinVersion")

def solarengine_version = SolarengineAnalysisGradleProperties_SDKVersion

dependencies {
  // For < 0.71, this will be from the local maven repo
  // For > 0.71, this will be replaced by `com.facebook.react:react-android:$version` by react gradle plugin
  //noinspection GradleDynamicVersion
  implementation "com.facebook.react:react-native:+"
  implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

  println("**************[SolarEngine] You are using sdkversion: $solarengine_version . " +
    "**************")

  if(SolarengineAnalysisGradleProperties_BuildOverSeaChannel.toBoolean()){
    //oversea
    println("**************[SolarEngine] You are using Oversea sdk. **************")
    implementation "com.reyun.solar.engine.oversea:solar-engine-core:${solarengine_version}"
    if(SolarengineAnalysisGradleProperties_EnableRemoteConfig.toBoolean()) {
      implementation "com.reyun.solar.engine.oversea:solar-remote-config:${solarengine_version}"
    }
    // if you want to use oaid plugin, open here
    implementation "com.reyun.solar.engine:se-plugin-oaid:${solarengine_version}"

  }else {
    //china
    println("**************[SolarEngine] You are using China sdk. **************")
    implementation "com.reyun.solar.engine.china:solar-engine-core:${solarengine_version}"

    if(SolarengineAnalysisGradleProperties_EnableRemoteConfig.toBoolean()) {
      implementation "com.reyun.solar.engine.china:solar-remote-config:${solarengine_version}"
    }else{
          println("**************[SolarEngine] You disabled the RemoteConfig. **************")
    }

  }

}

